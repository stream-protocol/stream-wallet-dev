"use strict";
// TODO: integrate into exisitng build script
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const exec_1 = require("./exec");
const os_1 = __importDefault(require("os"));
const paths_1 = require("./paths");
const [tag = "latest"] = process.argv.slice(2);
const { uid, gid } = os_1.default.userInfo();
const cmd = "docker";
const cflags = "-o ./prebuild/emscripten/blst.js " +
    "--pre-js ./prebuild/emscripten/pre.js " +
    "--post-js ./prebuild/emscripten/post.js " +
    // Prepends blst_blue_wrapper.cpp to source files list.
    "/src/prebuild/emscripten/blst_glue_wrapper.cpp";
const args = [
    "run",
    "--rm",
    "-v",
    `${paths_1.ROOT_DIR}:/src`,
    "-u",
    `${uid}:${gid}`,
    "-e",
    "CROSS_COMPILE=em",
    "-e",
    `CFLAGS=${cflags}`,
    `emscripten/emsdk:${tag}`,
    "/src/blst/build.sh",
    "-link",
    "-no-archive",
];
const opts = { cwd: paths_1.ROOT_DIR };
exec_1.exec(cmd, args, opts)
    .then(() => {
    // eslint-disable-next-line no-console
    console.log("Emscripten bindings built!");
})
    .catch((reason) => {
    // eslint-disable-next-line no-console
    console.error(reason);
    process.exit(1);
});
//# sourceMappingURL=buildEmscripten.js.map
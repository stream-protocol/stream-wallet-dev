"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.omitDefaults = exports.omitDefault = void 0;
const utils_1 = require("@cosmjs/utils");
const long_1 = __importDefault(require("long"));
/**
 * Converts default values to null in order to tell protobuf.js
 * to not serialize them.
 *
 * @see https://github.com/cosmos/cosmos-sdk/pull/6979
 */
function omitDefault(input) {
    if (input === undefined || input === null)
        return null;
    if (typeof input === "number" || typeof input === "boolean" || typeof input === "string") {
        return input || null;
    }
    if (long_1.default.isLong(input)) {
        return !input.isZero() ? input : null;
    }
    if (Array.isArray(input) || utils_1.isUint8Array(input)) {
        return input.length ? input : null;
    }
    throw new Error("Input type not supported");
}
exports.omitDefault = omitDefault;
/**
 * Walks through a potentially nested object and calls omitDefault on each element.
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function omitDefaults(input) {
    // Unset
    if (input === undefined || input === null)
        return null;
    // Protobuf element
    if (typeof input === "number" ||
        typeof input === "boolean" ||
        typeof input === "string" ||
        long_1.default.isLong(input) ||
        Array.isArray(input) ||
        utils_1.isUint8Array(input)) {
        return omitDefault(input);
    }
    // Object
    if (utils_1.isNonNullObject(input)) {
        return Object.entries(input).reduce((accumulator, [key, value]) => (Object.assign(Object.assign({}, accumulator), { [key]: omitDefaults(value) })), {});
    }
    throw new Error(`Input type not supported: ${typeof input}`);
}
exports.omitDefaults = omitDefaults;
//# sourceMappingURL=adr27.js.map
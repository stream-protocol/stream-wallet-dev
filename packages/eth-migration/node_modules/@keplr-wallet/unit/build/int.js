"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uint = exports.Int = void 0;
const big_integer_1 = __importDefault(require("big-integer"));
class Int {
    /**
     * @param int - Parse a number | bigInteger | string into a bigInt.
     * Remaing parameters only will be used when type of int is string.
     * @param base - Default base is 10.
     * @param alphabet - Default alphabet is "0123456789abcdefghijklmnopqrstuvwxyz".
     * @param caseSensitive - Defaults to false.
     */
    constructor(int, base, alphabet, caseSensitive) {
        if (typeof int === "string") {
            this.int = big_integer_1.default(int, base, alphabet, caseSensitive);
        }
        else if (typeof int === "number") {
            this.int = big_integer_1.default(int);
        }
        else if (typeof int === "bigint") {
            this.int = big_integer_1.default(int);
        }
        else {
            this.int = big_integer_1.default(int);
        }
    }
    toString() {
        return this.int.toString(10);
    }
    equals(i) {
        return this.int.equals(i.int);
    }
    gt(i) {
        return this.int.gt(i.int);
    }
    gte(i) {
        return this.int.greaterOrEquals(i.int);
    }
    lt(i) {
        return this.int.lt(i.int);
    }
    lte(i) {
        return this.int.lesserOrEquals(i.int);
    }
    add(i) {
        return new Int(this.int.add(i.int));
    }
    sub(i) {
        return new Int(this.int.subtract(i.int));
    }
    mul(i) {
        return new Int(this.int.multiply(i.int));
    }
    div(i) {
        return new Int(this.int.divide(i.int));
    }
    mod(i) {
        return new Int(this.int.mod(i.int));
    }
    neg() {
        return new Int(this.int.negate());
    }
}
exports.Int = Int;
class Uint {
    /**
     * @param uint - Parse a number | bigInteger | string into a bigUint.
     * Remaing parameters only will be used when type of int is string.
     * @param base - Default base is 10.
     * @param alphabet - Default alphabet is "0123456789abcdefghijklmnopqrstuvwxyz".
     * @param caseSensitive - Defaults to false.
     */
    constructor(uint, base, alphabet, caseSensitive) {
        if (typeof uint === "string") {
            this.uint = big_integer_1.default(uint, base, alphabet, caseSensitive);
        }
        else if (typeof uint === "number") {
            this.uint = big_integer_1.default(uint);
        }
        else if (typeof uint === "bigint") {
            this.uint = big_integer_1.default(uint);
        }
        else {
            this.uint = big_integer_1.default(uint);
        }
        if (this.uint.isNegative()) {
            throw new TypeError("Uint should not be negative");
        }
    }
    toString() {
        return this.uint.toString(10);
    }
    equals(i) {
        return this.uint.equals(i.uint);
    }
    gt(i) {
        return this.uint.gt(i.uint);
    }
    gte(i) {
        return this.uint.greaterOrEquals(i.uint);
    }
    lt(i) {
        return this.uint.lt(i.uint);
    }
    lte(i) {
        return this.uint.lesserOrEquals(i.uint);
    }
    add(i) {
        return new Uint(this.uint.add(i.uint));
    }
    sub(i) {
        return new Uint(this.uint.subtract(i.uint));
    }
    mul(i) {
        return new Uint(this.uint.multiply(i.uint));
    }
    div(i) {
        return new Uint(this.uint.divide(i.uint));
    }
    mod(i) {
        return new Uint(this.uint.mod(i.uint));
    }
}
exports.Uint = Uint;
//# sourceMappingURL=int.js.map
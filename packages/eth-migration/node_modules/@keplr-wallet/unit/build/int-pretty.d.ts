import { Int } from "./int";
import { Dec } from "./decimal";
import { DeepReadonly } from "utility-types";
export declare type IntPrettyOptions = {
    precision: number;
    maxDecimals: number;
    trim: boolean;
    shrink: boolean;
    ready: boolean;
    locale: boolean;
};
export declare class IntPretty {
    protected int: Int;
    protected _options: IntPrettyOptions;
    constructor(num: Int | Dec);
    get options(): DeepReadonly<IntPrettyOptions>;
    precision(prec: number): IntPretty;
    maxDecimals(max: number): IntPretty;
    trim(bool: boolean): IntPretty;
    shrink(bool: boolean): IntPretty;
    locale(locale: boolean): IntPretty;
    /**
     * Ready indicates the actual value is ready to show the users.
     * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).
     * The method that returns prettied value may return `undefined` or `null` if the value is not ready.
     * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.
     * @param bool
     */
    ready(bool: boolean): IntPretty;
    get isReady(): boolean;
    add(target: IntPretty): IntPretty;
    toDec(): Dec;
    toString(): string;
    clone(): IntPretty;
}

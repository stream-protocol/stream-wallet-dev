"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntPretty = void 0;
const decimal_1 = require("./decimal");
const dec_utils_1 = require("./dec-utils");
const coin_utils_1 = require("./coin-utils");
class IntPretty {
    constructor(num) {
        this._options = {
            precision: 0,
            maxDecimals: 0,
            trim: false,
            shrink: false,
            ready: true,
            locale: true,
        };
        if (num instanceof decimal_1.Dec) {
            let dec = num;
            let precision = 0;
            for (let i = 0; i < 18; i++) {
                dec = dec.mul(new decimal_1.Dec(10));
                if (dec.equals(new decimal_1.Dec(dec.truncate()))) {
                    break;
                }
                precision++;
            }
            const int = num.mulTruncate(dec_utils_1.DecUtils.getPrecisionDec(precision));
            this.int = int.truncate();
            this._options.precision = precision;
        }
        else {
            this.int = num;
        }
    }
    get options() {
        return this._options;
    }
    precision(prec) {
        const pretty = this.clone();
        pretty._options.precision = prec;
        return pretty;
    }
    maxDecimals(max) {
        const pretty = this.clone();
        pretty._options.maxDecimals = max;
        return pretty;
    }
    trim(bool) {
        const pretty = this.clone();
        pretty._options.trim = bool;
        return pretty;
    }
    shrink(bool) {
        const pretty = this.clone();
        pretty._options.shrink = bool;
        return pretty;
    }
    locale(locale) {
        const pretty = this.clone();
        pretty._options.locale = locale;
        return pretty;
    }
    /**
     * Ready indicates the actual value is ready to show the users.
     * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).
     * The method that returns prettied value may return `undefined` or `null` if the value is not ready.
     * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.
     * @param bool
     */
    ready(bool) {
        const pretty = this.clone();
        pretty._options.ready = bool;
        return pretty;
    }
    get isReady() {
        return this._options.ready;
    }
    add(target) {
        const pretty = this.clone();
        // TODO: Handle the precision of target.
        pretty.int = pretty.int.add(target.int);
        return pretty;
    }
    toDec() {
        let dec = new decimal_1.Dec(this.int);
        if (this._options.precision) {
            dec = dec.quoTruncate(dec_utils_1.DecUtils.getPrecisionDec(this._options.precision));
        }
        return dec;
    }
    toString() {
        const dec = this.toDec();
        let result = "";
        if (!this._options.shrink) {
            result = dec.toString(this._options.maxDecimals, this._options.locale);
        }
        else {
            result = coin_utils_1.CoinUtils.shrinkDecimals(this.int, this._options.precision, 0, this._options.maxDecimals, this._options.locale);
        }
        if (this._options.trim) {
            result = dec_utils_1.DecUtils.trim(result);
        }
        return result;
    }
    clone() {
        const pretty = new IntPretty(this.int);
        pretty._options = Object.assign({}, this._options);
        return pretty;
    }
}
exports.IntPretty = IntPretty;
//# sourceMappingURL=int-pretty.js.map
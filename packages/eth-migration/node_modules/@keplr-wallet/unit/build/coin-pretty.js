"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoinPretty = void 0;
const int_pretty_1 = require("./int-pretty");
class CoinPretty {
    constructor(_currency, amount) {
        this._currency = _currency;
        this.amount = amount;
        this._options = {
            separator: " ",
            upperCase: false,
            lowerCase: false,
            hideDenom: false,
        };
        if (amount instanceof int_pretty_1.IntPretty) {
            this.intPretty = amount;
        }
        else {
            this.intPretty = new int_pretty_1.IntPretty(amount);
        }
        this.intPretty = this.intPretty
            .maxDecimals(_currency.coinDecimals)
            .precision(_currency.coinDecimals);
    }
    get options() {
        return Object.assign(Object.assign({}, this._options), this.intPretty.options);
    }
    get denom() {
        return this.currency.coinDenom;
    }
    get currency() {
        return this._currency;
    }
    setCurrency(currency) {
        const pretty = new CoinPretty(currency, this.amount);
        pretty._options = Object.assign({}, this._options);
        pretty.intPretty = this.intPretty.clone();
        return pretty;
    }
    separator(str) {
        const pretty = this.clone();
        pretty._options.separator = str;
        return pretty;
    }
    upperCase(bool) {
        const pretty = this.clone();
        pretty._options.upperCase = bool;
        pretty._options.lowerCase = !bool;
        return pretty;
    }
    lowerCase(bool) {
        const pretty = this.clone();
        pretty._options.lowerCase = bool;
        pretty._options.upperCase = !bool;
        return pretty;
    }
    hideDenom(bool) {
        const pretty = this.clone();
        pretty._options.hideDenom = bool;
        return pretty;
    }
    precision(prec) {
        const pretty = this.clone();
        pretty.intPretty = pretty.intPretty.precision(prec);
        return pretty;
    }
    maxDecimals(max) {
        const pretty = this.clone();
        pretty.intPretty = pretty.intPretty.maxDecimals(max);
        return pretty;
    }
    trim(bool) {
        const pretty = this.clone();
        pretty.intPretty = pretty.intPretty.trim(bool);
        return pretty;
    }
    shrink(bool) {
        const pretty = this.clone();
        pretty.intPretty = pretty.intPretty.shrink(bool);
        return pretty;
    }
    locale(locale) {
        const pretty = this.clone();
        pretty.intPretty = pretty.intPretty.locale(locale);
        return pretty;
    }
    /**
     * Ready indicates the actual value is ready to show the users.
     * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).
     * The method that returns prettied value may return `undefined` or `null` if the value is not ready.
     * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.
     * @param bool
     */
    ready(bool) {
        const pretty = this.clone();
        pretty.intPretty = pretty.intPretty.ready(bool);
        return pretty;
    }
    get isReady() {
        return this.intPretty.isReady;
    }
    add(target) {
        const pretty = this.clone();
        pretty.intPretty = pretty.intPretty.add(target.intPretty);
        return pretty;
    }
    toDec() {
        return this.intPretty.toDec();
    }
    toString() {
        let denom = this.denom;
        if (this._options.upperCase) {
            denom = denom.toUpperCase();
        }
        if (this._options.lowerCase) {
            denom = denom.toLowerCase();
        }
        let separator = this._options.separator;
        if (this._options.hideDenom) {
            denom = "";
            separator = "";
        }
        return `${this.intPretty.toString()}${separator}${denom}`;
    }
    clone() {
        const pretty = new CoinPretty(this._currency, this.amount);
        pretty._options = Object.assign({}, this._options);
        pretty.intPretty = this.intPretty.clone();
        return pretty;
    }
}
exports.CoinPretty = CoinPretty;
//# sourceMappingURL=coin-pretty.js.map